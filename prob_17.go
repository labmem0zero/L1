package main

import "fmt"

func BinFind(in[]int,toFind int,delta int) (res int, ok bool){
	//не забываем предохраниться
	if len(in)<2{
		return 0,false
	}
	//берем центральную точку, с которой будем сравнивать искомое число
	tmp:=in[len(in)/2-1]
	var tmpSlice []int
	//delta - переменная, которая показывает, сколько чисел у нас осталось в основном срезе
	//до текущего "подсреза". Поскольку, у нас рекурентно вызывается функция не на весь срез,
	//а на выбранный(левый или правый) подсрез, то нужно передавать эти данные.
	//Если бы мы передавали весь срез и индексы левой и правой части для поиска,
	//то delta не требовалась бы
	if toFind==tmp{
		return delta+len(in)/2, true
	}
	//собсно, если искомое число меньше, чем центральное, то нужно продолжать поиск в левой части
	if toFind<tmp{
		tmpSlice=in[:len(in)/2]
	}
	//а тут тоже самое, только с правой частью
	if toFind>tmp{
		tmpSlice=in[len(in)/2:]
		delta=delta+len(in)/2
	}
	//и после того, как мы выбрали следующую часть для поиска, выполняем рекуррентный вызов
	return BinFind(tmpSlice,toFind,delta)
}

func prob17(){
	//мы находимся в сферическом вакууме, поэтому у нас заранее отсортироваенный срез
	a:=[]int{1,8,15,21,27,36,39}
	toFind:=21
	fmt.Println(a)
	fmt.Println("toFind =",toFind)
	fmt.Println(BinFind(a,toFind,0))
}
