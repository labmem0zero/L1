package main

import (
	"fmt"
	"math/rand"
	"sync"
)

func prob7(){
	//мог использовать структуру а-ля карта+sync.RWMutex, решил показать владение
	//такой вещью, как sync.Map, потому что в одном из предидущих заданий уже показал,
	//что умею использовать мьютекс в структуре. sync.Map устроен сложнее,
	//чем первый вариант, но дает существенную прибавку
	//к скорости считывания и записи при наличии 4 и более ядер ЦПУ.
	//Связано с тем, что мьютекс заставляет ядро при работе с записью
	//передавать кэш остальным ядрам с информацией о том, что он владеет валидной копией
	//текущей записи. Это занимает 20-40нс, но при большом количестве горутин и при большом количестве
	//операций над картой играет важную роль. Эта проблема называется cache contention.
	var prob7map sync.Map
	var wg sync.WaitGroup
	//шесть воркеров. Каждый делает 1000 записей с рандомными ключем и зачением.
	for i:=1;i<6;i++{
		wg.Add(1)
		go func(wrkrID int){
			for i:=1;i<1000;i++{
				prob7map.LoadOrStore(rand.Intn(99999),rand.Intn(99999))
			}
			fmt.Printf("Worker #%v:1000 записей в катру сделаны\n",wrkrID)
			wg.Done()
		}(i)
	}
	wg.Wait()
}
